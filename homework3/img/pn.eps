%!PS-Adobe-3.0 EPSF-3.0
%%BoundingBox: 0 0 446 207
%%Creator: yExport 1.5
%%Producer: org.freehep.graphicsio.ps.EPSGraphics2D Revision: 12753 
%%For: 
%%Title: 
%%CreationDate: Friday, December 21, 2018 7:29:07 PM CET
%%LanguageLevel: 3
%%EndComments
%%BeginProlog
100 dict dup begin

%
% File: org/freehep/graphicsio.ps/PSProlog.txt
% Author: Charles Loomis
%

% Redefinitions which save some space in the output file.  These are also
% the same as the PDF operators.
/q {gsave} def
/Q {grestore} def

/n {newpath} def
/m {moveto} def
/l {lineto} def
/c {curveto} def
/h {closepath} def

/re {4 -2 roll moveto
     dup 0 exch rlineto exch 0 rlineto
     neg 0 exch rlineto closepath} def

/f {fill} def
/f* {eofill} def
/F {gsave vg&FC fill grestore} def
/F* {gsave vg&FC eofill grestore} def

/s {closepath stroke} def
/S {stroke} def

/b {closepath gsave vg&FC fill grestore
    gsave stroke grestore newpath} def
/B {gsave vg&FC fill grestore gsave stroke grestore newpath} def
/b* {closepath gsave vg&FC eofill grestore
    gsave stroke grestore newpath} def
/B* {gsave vg&FC eofill grestore gsave stroke grestore newpath} def

/g {1 array astore /vg&fcolor exch def} def
/G {setgray} def
/k {4 array astore /vg&fcolor exch def} def
/K {setcmykcolor} def
/rg {3 array astore /vg&fcolor exch def} def
/RG {setrgbcolor} def

% Initialize the fill color.
0 0 0 rg

/vg&FC {mark vg&fcolor aload pop
        counttomark 1 eq {G} if
        counttomark 3 eq {RG} if
        counttomark 4 eq {K} if
        cleartomark } def

/vg&DFC {/vg&fcolor exch def} def

/vg&C {mark exch aload pop
       counttomark 1 eq {G} if
       counttomark 3 eq {RG} if
       counttomark 4 eq {K} if
       cleartomark } def

/w {setlinewidth} def
/j {setlinejoin} def
/J {setlinecap} def
/M {setmiterlimit} def
/d {setdash} def
/i {setflat} def

/W {clip} def
/W* {eoclip} def

% Setup the default graphics state.
% (black; 1 pt. linewidth; miter join; butt-ends; solid)
/defaultGraphicsState {0 g 1 w 0 j 0 J [] 0 d} def

% Emulation of the rectangle operators for PostScript implementations
% which do not implement all Level 2 features.  This is an INCOMPLETE
% emulation; only the "x y width height rect..." form is emulated.
/*rf {gsave newpath re fill grestore} def
/*rs {gsave newpath re stroke grestore} def
/*rc {newpath re clip} def
/rf  /rectfill where {pop /rectfill}{/*rf} ifelse load def
/rs  /rectstroke where {pop /rectstroke}{/*rs} ifelse load def
/rc  /rectclip where {pop /rectclip}{/*rc} ifelse load def

% Emulation of the selectfont operator.  This includes a 20% increase in
% the fontsize which is necessary to get sizes similar to the Java fonts.
/*sf {exch findfont exch
      dup type /arraytype eq {makefont}{scalefont} ifelse setfont} bind def
/sf /selectfont where {pop {1.2 mul selectfont}}{{1.2 mul *sf}} ifelse def

% Special version of stroke which allows the dash pattern to continue
% across path segments.  (This may be needed for PostScript although
% modern printers seem to do this correctly.)
/vg&stroke {
  currentdash pop length 0 eq
  {stroke}
  {
    currentdash /vg&doffset exch def pop
    flattenpath
    {m vg&resetdash}
    {2 copy
     currentpoint
     3 -1 roll sub dup mul
     3 1 roll sub dup mul
     add sqrt
     3 1 roll l
     currentdash 3 -1 roll add setdash}
     {}
     {h vg&resetdash}
     pathforall
     stroke
     vg&resetdash
  } ifelse
} def
/vg&resetdash {currentdash pop vg&doffset setdash} def

% Initialize variables for safety.
/delta 0 def
/xv 0 def  /yv 0 def  /width 0 def  /height 0 def

% Initialize to portrait INTERNATIONAL (Letter-height, A4-width) page.
/pw 595 def  /ph 791  def  /po true def /ftp false def

% Initialize margins to 20 points.
/ml 20 def  /mr 20 def  /mt 20 def  /mb 20 def

% Temporary matrices.
/smatrix 0 def  /nmatrix 0 def

% set page size (usage: <page width><page height> setpagesize)
/setpagesize {/ph exch def /pw exch def} def

% set page orientation (usage: portrait or landscape)
/portrait {/po true def} def
/landscape {/po false def} def

% force natural size for image (usage: naturalsize)
/naturalsize {/ftp false def} def

% resize image to fill page (usage: fittopage)
/fittopage {/ftp true def} def

% set margins of the page (usage: <left><bottom><top><right> setmargins)
/setmargins {/mr exch def /mt exch def /mb exch def /ml exch def} def

% set the graphic's size (usage: <width><height> setsize)
/setsize {/gh exch def /gw exch def} def

% set the graphic's origin (usage: <x0><y0> setorigin)
/setorigin {/gy exch def /gx exch def} def

% calculate image center
/imagecenter {pw ml sub mr sub 2 div ml add
              ph mt sub mb sub 2 div mb add} def

% calculate the necessary scaling
/imagescale {po {gw}{gh} ifelse pw ml sub mr sub div
             po {gh}{gw} ifelse ph mt sub mb sub div
             2 copy lt {exch} if pop
             ftp not {1 2 copy lt {exch} if pop} if
             1 exch div /sfactor exch def
             /gw gw sfactor mul def /gh gh sfactor mul def} def

% calculate image origin
/imageorigin {pw ml sub mr sub 2 div ml add
              po {gw}{gh} ifelse 2 div sub
              ph mt sub mb sub 2 div mb add
              po {gh}{gw} ifelse 2 div po {add}{sub} ifelse} def

% calculate the clipping origin
/cliporigin  {pw ml sub mr sub 2 div ml add
              po {gw}{gh} ifelse 2 div sub floor
              ph mt sub mb sub 2 div mb add
              po {gh}{gw} ifelse 2 div sub floor} def

% Set the clipping region to the bounding box.
/cliptobounds {cliporigin po {gw}{gh} ifelse 1 add
                          po {gh}{gw} ifelse 1 add rc} def

% set the base transformation matrix (usage: setbasematrix)
/setbasematrix {imageorigin translate
                po {0}{90} ifelse rotate
                sfactor sfactor neg scale
                /defaultmatrix matrix currentmatrix def} def

% The lower-right bias in drawing 1 pt. wide lines.
/bias  {q 0.5 0.5 translate} def
/unbias {Q} def

% Define the composite fonts used to print Unicode strings.
% Undefine particular values in an encoding array.
/vg&undef { {exch dup 3 -1 roll /.notdef put} forall } def
/vg&redef { {3 -1 roll dup 4 2 roll put} forall } def

% usage: key encoding basefontname vg&newbasefont font
/vg&newbasefont {
findfont dup length dict copy
  begin
    currentdict /FID undef
    /Encoding exch def
    dup /FontName exch def
    currentdict
  end
definefont
} def

% usage: key encoding basefontname vg&newskewedbasefont font
/vg&newskewedbasefont {
findfont dup length dict copy
  begin
    currentdict /FID undef
    /Encoding exch def
    dup /FontName exch def
    exch FontMatrix exch matrix concatmatrix /FontMatrix exch def
    currentdict
  end
definefont
} def

% usage: basekey suffix vg&nconcat name
/vg&nconcat {
  2 {dup length string cvs exch} repeat
  dup length 3 -1 roll dup length 3 -1 roll add string
  dup 0 4 -1 roll dup length 5 1 roll putinterval
  dup 4 -2 roll exch putinterval cvn
} def

%usage: fontname vg&skewmatrix matrix
/vg&skewmatrix {
findfont dup /FontInfo known
  {
    /FontInfo get dup /ItalicAngle known
    {
      [ 1 0 4 -1 roll /ItalicAngle get neg dup sin exch cos div 1 0 0 ]
    }
    {pop matrix} ifelse
  }
  {pop matrix} ifelse
} def

% usage: newfontname basefontname vg&newcompositefont --
/vg&newcompositefont {
/vg&fstyle exch def
/vg&bfont exch def
/vg&fname exch def
<<
/FontStyleBits vg&fstyle
/FontType 0
/FontMatrix matrix
/FontName vg&fname
/FMapType 2
/Encoding [ 0 1 255 {pop 6} for ]
          dup 16#00 0 put % Latin
          dup 16#03 1 put % Greek
          dup 16#20 2 put % Punctuation
          dup 16#21 3 put % Arrows
          dup 16#22 4 put % MathOps
          dup 16#27 5 put % Dingbats

/FDepVector [
vg&bfont /-UC-Latin vg&nconcat UCLatinEncoding
vg&bfont vg&newbasefont

vg&bfont vg&skewmatrix
vg&bfont /-UC-Greek vg&nconcat UCGreekEncoding
/Symbol vg&newskewedbasefont

vg&bfont /-UC-Punctuation vg&nconcat UCPunctuationEncoding
vg&bfont vg&newbasefont

/Arrows-UC findfont
/MathOps-UC findfont
/Dingbats-UC findfont
/Undefined-UC findfont ]
>>
vg&fname exch definefont pop
} def

% Null encoding vector (all elements set to .notdef)
/NullEncoding [ 256 {/.notdef} repeat ] def

% Unicode Latin encoding (unicode codes \u0000-\u00ff)
/UCLatinEncoding
  ISOLatin1Encoding dup length array copy
  dup 16#60 /grave put
  [ 16#90 16#91 16#92 16#93 16#94 16#95 16#96
    16#97 16#98 16#9a 16#9b 16#9d 16#9e 16#9f
  ] vg&undef
  def

% Unicode Greek encoding (unicode codes \u0370-\u03ff)
/UCGreekEncoding
  NullEncoding dup length array copy
  << 16#91 /Alpha    16#92 /Beta      16#93 /Gamma    16#94 /Delta
     16#95 /Epsilon  16#96 /Zeta      16#97 /Eta      16#98 /Theta
     16#99 /Iota     16#9a /Kappa     16#9b /Lambda   16#9c /Mu
     16#9d /Nu       16#9e /Xi        16#9f /Omicron  16#a0 /Pi
     16#a1 /Rho      16#a3 /Sigma     16#a4 /Tau      16#a5 /Upsilon
     16#a6 /Phi      16#a7 /Chi       16#a8 /Psi      16#a9 /Omega
     16#b1 /alpha    16#b2 /beta      16#b3 /gamma    16#b4 /delta
     16#b5 /epsilon  16#b6 /zeta      16#b7 /eta      16#b8 /theta
     16#b9 /iota     16#ba /kappa     16#bb /lambda   16#bc /mu
     16#bd /nu       16#be /xi        16#bf /omicron  16#c0 /pi
     16#c1 /rho      16#c2 /sigma1    16#c3 /sigma    16#c4 /tau
     16#c5 /upsilon  16#c6 /phi1      16#c7 /chi      16#c8 /psi
     16#c9 /omega    16#7e /semicolon 16#87 /dotmath  16#d1 /theta1
     16#d2 /Upsilon1 16#d5 /phi       16#d6 /omega1
  >> vg&redef
  def

% Unicode punctuation encoding (unicode codes \u2000-\u206f)
/UCPunctuationEncoding
  NullEncoding dup length array copy
  << 16#10 /hyphen          16#11 /hyphen              16#12 /endash
     16#13 /emdash          16#18 /quoteleft           16#19 /quoteright
     16#1a /quotesinglbase  16#1b /quotesingle         16#1c /quotedblleft
     16#1d /quotedblright   16#1e /quotedblbase        16#1f /quotedbl
     16#20 /dagger          16#21 /daggerdbl           16#22 /bullet
     16#24 /period          16#26 /ellipsis            16#27 /periodcentered
     16#30 /perthousand     16#44 /fraction
     16#70 /zerosuperior    16#74 /foursuperior        16#75 /fivesuperior
     16#76 /sixsuperior     16#77 /sevensuperior       16#78 /eightsuperior
     16#79 /ninesuperior    16#7b /hyphensuperior      16#7d /parenleftsuperior
     16#7e /parenrightsuperior
     16#80 /zeroinferior    16#84 /fourinferior        16#85 /fiveinferior
     16#81 /oneinferior     16#82 /twoinferior         16#83 /threeinferior
     16#86 /sixinferior     16#87 /seveninferior       16#88 /eightinferior
     16#89 /nineinferior    16#8b /hypheninferior      16#8d /parenleftinferior
     16#8e /parenrightinferior
  >> vg&redef
  def

% Unicode mathematical operators encoding (unicode codes \u2200-\u22ff)
/UCMathOpsEncoding
  NullEncoding dup length array copy
  << 16#00 /universal       16#02 /partialdiff         16#03 /existential
     16#05 /emptyset        16#06 /Delta               16#07 /gradient
     16#08 /element         16#09 /notelement          16#0b /suchthat
     16#0f /product         16#11 /summation           16#12 /minus
     16#15 /fraction        16#17 /asteriskmath        16#19 /bullet
     16#1a /radical         16#1d /proportional        16#1e /infinity
     16#20 /angle           16#23 /bar                 16#27 /logicaland
     16#28 /logicalor       16#29 /intersection        16#2a /union
     16#2b /integral        16#34 /therefore           16#36 /colon
     16#3c /similar         16#45 /congruent           16#48 /approxequal
     16#60 /notequal        16#61 /equivalence         16#64 /lessequal
     16#65 /greaterequal    16#82 /propersubset        16#83 /propersuperset
     16#86 /reflexsubset    16#87 /reflexsuperset      16#95 /circleplus
     16#97 /circlemultiply  16#a5 /perpendicular       16#03 /existential
     16#c0 /logicaland      16#c1 /logicalor           16#c2 /intersection
     16#c3 /union           16#c4 /diamond             16#c5 /dotmath
  >> vg&redef
  def

% Unicode arrows encoding (unicode codes \u2190-\u21ff)
% Also includes those "Letterlike" unicode characters
% which are available in the symbol font. (unicode codes \u2100-\u214f)
/UCArrowsEncoding
  NullEncoding dup length array copy
  << 16#11 /Ifraktur        16#1c /Rfraktur            16#22 /trademarkserif
     16#35 /aleph
     16#90 /arrowleft       16#91 /arrowup             16#92 /arrowright
     16#93 /arrowdown       16#94 /arrowboth           16#d0 /arrowdblleft
     16#d1 /arrowdblup      16#d2 /arrowdblright       16#d3 /arrowdbldown
     16#d4 /arrowdblboth
  >> vg&redef
  def

/ZapfDingbats findfont /Encoding get
dup length array copy /UCDingbatsEncoding exch def
16#20 1 16#7f {
  dup 16#20 sub exch
  UCDingbatsEncoding exch get
  UCDingbatsEncoding 3 1 roll put
} for
16#a0 1 16#ff {
  dup 16#40 sub exch
  UCDingbatsEncoding exch get
  UCDingbatsEncoding 3 1 roll put
} for
UCDingbatsEncoding [ 16#c0 1 16#ff {} for ] vg&undef
[ 16#00  16#05 16#0a 16#0b  16#28 16#4c 16#4e  16#53 16#54 16#55  16#57 16#5f
  16#60  16#68 16#69 16#6a  16#6b 16#6c 16#6d  16#6e 16#6f 16#70  16#71 16#72
  16#73  16#74 16#75 16#95  16#96 16#97 16#b0  16#bf
] vg&undef pop

% Define the base fonts which don't change.
/Undefined-UC NullEncoding       /Helvetica    vg&newbasefont pop
/MathOps-UC   UCMathOpsEncoding  /Symbol       vg&newbasefont pop
/Arrows-UC    UCArrowsEncoding   /Symbol       vg&newbasefont pop
/Dingbats-UC  UCDingbatsEncoding /ZapfDingbats vg&newbasefont pop

% Make the SansSerif composite fonts.
/SansSerif /Helvetica 16#00 vg&newcompositefont
/SansSerif-Bold /Helvetica-Bold 16#01 vg&newcompositefont
/SansSerif-Italic /Helvetica-Oblique 16#02 vg&newcompositefont
/SansSerif-BoldItalic /Helvetica-BoldOblique 16#03 vg&newcompositefont

% Make the Serif composite fonts.
/Serif /Times-Roman 16#00 vg&newcompositefont
/Serif-Bold /Times-Bold 16#01 vg&newcompositefont
/Serif-Italic /Times-Italic 16#02 vg&newcompositefont
/Serif-BoldItalic /Times-BoldItalic 16#03 vg&newcompositefont

% Make the Monospaced composite fonts.
/Monospaced /Courier 16#00 vg&newcompositefont
/Monospaced-Bold /Courier-Bold 16#01 vg&newcompositefont
/Monospaced-Italic /Courier-Oblique 16#02 vg&newcompositefont
/Monospaced-BoldItalic /Courier-BoldOblique 16#03 vg&newcompositefont

% Make the Dialog composite fonts.
/Dialog /Helvetica 16#00 vg&newcompositefont
/Dialog-Bold /Helvetica-Bold 16#01 vg&newcompositefont
/Dialog-Italic /Helvetica-Oblique 16#02 vg&newcompositefont
/Dialog-BoldItalic /Helvetica-BoldOblique 16#03 vg&newcompositefont

% Make the DialogInput composite fonts.
/DialogInput /Courier 16#00 vg&newcompositefont
/DialogInput-Bold /Courier-Bold 16#01 vg&newcompositefont
/DialogInput-Italic /Courier-Oblique 16#02 vg&newcompositefont
/DialogInput-BoldItalic /Courier-BoldOblique 16#03 vg&newcompositefont

% Make the Typewriter composite fonts (JDK 1.1 only).
/Typewriter /Courier 16#00 vg&newcompositefont
/Typewriter-Bold /Courier-Bold 16#01 vg&newcompositefont
/Typewriter-Italic /Courier-Oblique 16#02 vg&newcompositefont
/Typewriter-BoldItalic /Courier-BoldOblique 16#03 vg&newcompositefont


/cfontH {
 dup /fontsize exch def /SansSerif exch sf
 /vg&fontstyles [{cfontH} {cfontHB} {cfontHI} {cfontHBI}] def
} def
/cfontHB {
  dup /fontsize exch def /SansSerif-Bold exch sf
 /vg&fontstyles [{cfontH} {cfontHB} {cfontHI} {cfontHBI}] def
} def
/cfontHI {
 dup /fontsize exch def /SansSerif-Italic exch sf
 /vg&fontstyles [{cfontH} {cfontHB} {cfontHI} {cfontHBI}] def
} def
/cfontHBI {
 dup /fontsize exch def /SansSerif-BoldItalic exch sf
 /vg&fontstyles [{cfontH} {cfontHB} {cfontHI} {cfontHBI}] def
} def

/cfontT {
 dup /fontsize exch def /Serif exch sf
 /vg&fontstyles [{cfontT} {cfontTB} {cfontTI} {cfontTBI}] def
} def
/cfontTB {
 dup /fontsize exch def /Serif-Bold exch sf
 /vg&fontstyles [{cfontT} {cfontTB} {cfontTI} {cfontTBI}] def
} def
/cfontTI {
 dup /fontsize exch def /Serif-Italic exch sf
 /vg&fontstyles [{cfontT} {cfontTB} {cfontTI} {cfontTBI}] def
} def
/cfontTBI {
 dup /fontsize exch def /Serif-BoldItalic exch sf
 /vg&fontstyles [{cfontT} {cfontTB} {cfontTI} {cfontTBI}] def
} def

/cfontC {
 dup /fontsize exch def /Typewriter exch sf
 /vg&fontstyles [{cfontC} {cfontCB} {cfontCI} {cfontCBI}] def
} def
/cfontCB {
 dup /fontsize exch def /Typewriter-Bold exch sf
 /vg&fontstyles [{cfontC} {cfontCB} {cfontCI} {cfontCBI}] def
} def
/cfontCI {
 dup /fontsize exch def /Typewriter-Italic exch sf
 /vg&fontstyles [{cfontC} {cfontCB} {cfontCI} {cfontCBI}] def
} def
/cfontCBI {
 dup /fontsize exch def /Typewriter-BoldItalic exch sf
 /vg&fontstyles [{cfontC} {cfontCB} {cfontCI} {cfontCBI}] def
} def

% Darken or lighten the current color.
/darken {0.7 exch exp 3 copy
         q 4 -1 roll vg&C
         currentrgbcolor 3 {4 -2 roll mul} repeat
         3 array astore Q} def

/displayColorMap
<< /Cr   [1.00 0.00 0.00]       /Cg     [0.00 1.00 0.00]
   /Cb   [0.00 0.00 1.00]       /Cc     [1.00 0.00 0.00 0.00]
   /Cm   [0.00 1.00 0.00 0.00]  /Cy     [0.00 0.00 1.00 0.00]
   /Co   [1.00 0.78 0.00]       /Cp     [1.00 0.67 0.67]
   /Cw   [1   ]                 /Cgrl   [0.75]
   /Cgr  [0.50]                 /Cgrd   [0.25]
   /Ck   [0   ]
   /CGr  [1.00 0.00 0.00]       /CGg    [0.00 1.00 0.00]
   /CGb  [0.00 0.00 1.00]       /CGc    [1.00 0.00 0.00 0.00]
   /CGm  [0.00 1.00 0.00 0.00]  /CGy    [0.00 0.00 1.00 0.00]
   /CGo  [1.00 0.78 0.00]       /CGp    [1.00 0.67 0.67]
   /CGw  [1   ]                 /CGgrl  [0.75]
   /CGgr [0.50]                 /CGgrd  [0.25]
   /CGk  [0   ]
   /CIr  [1.00 0.00 0.00]       /CIg    [0.00 1.00 0.00]
   /CIb  [0.00 0.00 1.00]       /CIc    [1.00 0.00 0.00 0.00]
   /CIm  [0.00 1.00 0.00 0.00]  /CIy    [0.00 0.00 1.00 0.00]
   /CIo  [1.00 0.78 0.00]       /CIp    [1.00 0.67 0.67]
   /CIw  [1   ]                 /CIgrl  [0.75]
   /CIgr [0.50]                 /CIgrd  [0.25]
   /CIk  [0   ]
>> def

/printColorMap
<< /Cr   [1.00 0.33 0.33]       /Cg     [0.33 1.00 0.33]
   /Cb   [0.33 0.33 1.00]       /Cc     [1.00 0.00 0.00 0.00]
   /Cm   [0.00 1.00 0.00 0.00]  /Cy     [0.00 0.00 1.00 0.00]
   /Co   [1.00 0.78 0.00]       /Cp     [1.00 0.67 0.67]
   /Cw   [1   ]                 /Cgrl   [0.75]
   /Cgr  [0.50]                 /Cgrd   [0.25]
   /Ck   [0   ]
   /CGr  [1.00 0.33 0.33]       /CGg    [0.33 1.00 0.33]
   /CGb  [0.33 0.33 1.00]       /CGc    [1.00 0.00 0.00 0.00]
   /CGm  [0.00 1.00 0.00 0.00]  /CGy    [0.00 0.00 1.00 0.00]
   /CGo  [1.00 0.78 0.00]       /CGp    [1.00 0.67 0.67]
   /CGw  [1   ]                 /CGgrl  [0.75]
   /CGgr [0.50]                 /CGgrd  [0.25]
   /CGk  [0   ]
   /CIr  [1.00 0.33 0.33]       /CIg    [0.33 1.00 0.33]
   /CIb  [0.33 0.33 1.00]       /CIc    [1.00 0.00 0.00 0.00]
   /CIm  [0.00 1.00 0.00 0.00]  /CIy    [0.00 0.00 1.00 0.00]
   /CIo  [1.00 0.78 0.00]       /CIp    [1.00 0.67 0.67]
   /CIw  [1   ]                 /CIgrl  [0.75]
   /CIgr [0.50]                 /CIgrd  [0.25]
   /CIk  [0   ]
>> def

/grayColorMap
<< /Cr   [0   ]                 /Cg     [0   ]
   /Cb   [0   ]                 /Cc     [0   ]
   /Cm   [0   ]                 /Cy     [0   ]
   /Co   [0   ]                 /Cp     [0   ]
   /Cw   [0   ]                 /Cgrl   [0   ]
   /Cgr  [0   ]                 /Cgrd   [0   ]
   /Ck   [0   ]
   /CGr  [0.75]                 /CGg    [1   ]
   /CGb  [0.50]                 /CGc    [0.75]
   /CGm  [0.50]                 /CGy    [1   ]
   /CGo  [0.75]                 /CGp    [1   ]
   /CGw  [0   ]                 /CGgrl  [0.25]
   /CGgr [0.50]                 /CGgrd  [0.75]
   /CGk  [1   ]
   /CIr  [1   ]                 /CIg    [1   ]
   /CIb  [1   ]                 /CIc    [1   ]
   /CIm  [1   ]                 /CIy    [1   ]
   /CIo  [1   ]                 /CIp    [1   ]
   /CIw  [1   ]                 /CIgrl  [1   ]
   /CIgr [1   ]                 /CIgrd  [1   ]
   /CIk  [1   ]
>> def

/bwColorMap
<< /Cr   [0   ]                 /Cg     [0   ]
   /Cb   [0   ]                 /Cc     [0   ]
   /Cm   [0   ]                 /Cy     [0   ]
   /Co   [0   ]                 /Cp     [0   ]
   /Cw   [0   ]                 /Cgrl   [0   ]
   /Cgr  [0   ]                 /Cgrd   [0   ]
   /Ck   [0   ]
   /CGr  [1   ]                 /CGg    [1   ]
   /CGb  [1   ]                 /CGc    [1   ]
   /CGm  [1   ]                 /CGy    [1   ]
   /CGo  [1   ]                 /CGp    [1   ]
   /CGw  [0   ]                 /CGgrl  [1   ]
   /CGgr [1   ]                 /CGgrd  [1   ]
   /CGk  [1   ]
   /CIr  [1   ]                 /CIg    [1   ]
   /CIb  [1   ]                 /CIc    [1   ]
   /CIm  [1   ]                 /CIy    [1   ]
   /CIo  [1   ]                 /CIp    [1   ]
   /CIw  [1   ]                 /CIgrl  [1   ]
   /CIgr [1   ]                 /CIgrd  [1   ]
   /CIk  [1   ]
>> def

%
% The following routines handle the alignment of and printing of
% tagged strings.
%

% Predefine the bounding box values.
/bbllx 0 def /bblly 0 def /bburx 0 def /bbury 0 def

% This routine pops the first unicode character off of a string and returns
% the remainder of the string, the character code of first character,
% and a "true" if the string was non-zero length.
% <string>      popfirst <remaining string> <true>
% <null string> popfirst <false>
/popfirst {
  dup length 1 gt
    {dup 0 get /vg&fbyte exch def
     dup 1 get /vg&cbyte exch def
     dup length 2 sub 2 exch getinterval true}
    {pop false} ifelse
} def

% This routine shows a single unicode character given the font and
% character codes.
% <font code> <char code> unicharshow --
/unicharshow {
  2 string
  dup 0 5 -1 roll put
  dup 1 4 -1 roll put
  internalshow
} def

% This is an internal routine to alternate between determining the
% bounding box for stringsize and showing the string for recshow.
% <string> internalshow --
/internalshow {show} def

% This is an internal routine to alternate between determining the
% bounding box for stringsize and stroking various ornaments.
% <string> internalstroke --
/internalstroke {S} def

% Sets up internalshow to use the null device to determine string size.
% -- nullinternalshow --
/nullinternalshow {/internalshow {false charpath flattenpath
                                  pathbbox updatebbox} def} def

% Sets up internalstroke to use the null device to determine string size.
% -- nullinternalstroke --
/nullinternalstroke {
 /internalstroke {flattenpath pathbbox updatebbox} def} def

% This routine tests to see if the character code matches the first
% character of a string.
% <char code> <string> testchar <char code> <true or false>
/testchar {exch dup 3 -1 roll 0 get eq} def

% Raise the text baseline for superscripts.
% -- raise --
/raise {
  0 fontsize 2 div rmoveto
  /fontsize fontsize 2 mul 3 div def
  currentfont /FontName get fontsize sf
} def

% Un-raise the text baseline for superscripts.
% -- unraise --
/unraise {
  /fontsize fontsize 1.5 mul def
  0 fontsize 2 div neg rmoveto
} def

% Lower the text baseline for subscripts.
% -- lower --
/lower {
  0 fontsize 3 div neg rmoveto
  /fontsize fontsize 2 mul 3 div def
  currentfont /FontName get fontsize sf
} def

% Un-lower the text baseline for subscripts.
% -- unlower --
/unlower {
  /fontsize fontsize 1.5 mul def
  0 fontsize 3 div rmoveto
} def

% Compare the top two elements on the stack and leave only the
% larger one.
/maxval {2 copy gt {pop} {exch pop} ifelse} def

% Tokenize a string.  Do not use the usual PostScript token because
% parentheses will not be interpreted correctly because of rescanning
% of the string.
/vg&token {/vg&string exch def /vg&index -1 def /vg&level 0 def
0 2 vg&string length 2 sub {
  dup dup 1 add exch vg&string exch get 8 bitshift vg&string 3 -1 roll get or
  dup 16#f0fe eq {pop 1}{16#f0ff eq {-1}{0} ifelse} ifelse
  /vg&level exch vg&level add def
  vg&level 0 eq {/vg&index exch def exit} if pop
} for
vg&index 0 ge {
  vg&string vg&index 2 add dup vg&string length exch sub getinterval
  vg&index 2 gt {vg&string 2 vg&index 2 sub getinterval}{()} ifelse
  true}
{false} ifelse
} bind def

% Recursively show an unicode string.
% <string> recshow --
/recshow {
  popfirst
  {
    % Test to see if this is a string attribute.
    vg&fbyte 16#f0 and 16#e0 eq
    {
      q

      % Font style.
      currentfont dup /FontStyleBits known {/FontStyleBits get}{pop 0} ifelse
      vg&cbyte or vg&fontstyles exch get fontsize exch exec

      vg&token pop recshow currentpoint Q m recshow
    }
    {
      vg&fbyte 16#F8 and 16#F0 eq {

        % Superscript and/or subscript.
        vg&cbyte 16#00 eq {
          vg&token pop exch vg&token pop 3 -1 roll
          q raise recshow unraise currentpoint pop Q exch
          q lower recshow unlower currentpoint pop Q
          maxval currentpoint exch pop m recshow } if

        % Strikeout.
        vg&cbyte 16#01 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J vg&underline vg&uthick w
          currentpoint 4 -2 roll fontsize 3 div add moveto
          fontsize 3 div add lineto internalstroke Q
          recshow} if

        % Underline.
        vg&cbyte 16#02 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J vg&underline vg&uthick w
          currentpoint 4 -2 roll vg&uoffset add moveto
          vg&uoffset add lineto internalstroke Q
          recshow} if

        % Dashed underline.
        vg&cbyte 16#03 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J [ vg&uthick 5 mul vg&uthick 2 mul] 0 d
          vg&underline vg&uthick w
          currentpoint 4 -2 roll vg&uoffset add moveto
          vg&uoffset add lineto internalstroke Q
          recshow} if

        % Dotted underline.
        vg&cbyte 16#04 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 1 J [ 0 vg&uthick 3 mul] 0 d
          vg&underline vg&uthick w
          currentpoint 4 -2 roll vg&uoffset add moveto
          vg&uoffset add lineto internalstroke Q
          recshow} if

        % Thick underline.
        vg&cbyte 16#05 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J vg&underline vg&uthick 2 mul w
          currentpoint 4 -2 roll vg&uoffset vg&uthick 2 div sub add moveto
          vg&uoffset vg&uthick 2 div sub add lineto internalstroke Q
          recshow} if

        % Gray thick underline.
        vg&cbyte 16#06 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J vg&underline vg&uthick 2 mul w 0.5 setgray
          currentpoint 4 -2 roll vg&uoffset vg&uthick 2 div sub add moveto
          vg&uoffset vg&uthick 2 div sub add lineto internalstroke Q
          recshow} if

        % Overbar.
        vg&cbyte 16#07 eq {
          vg&token pop dup stringsize relative 4 1 roll pop pop exch
          3 -1 roll recshow
          q 0 J vg&underline vg&uthick w
          vg&uoffset neg add dup currentpoint pop exch m l internalstroke Q
          recshow} if
      }
      {
        vg&fbyte vg&cbyte unicharshow recshow
      } ifelse
    } ifelse
  } if
} def

% Get the underline position and thickness from the current font.
/vg&underline {

currentfont dup /FontType get 0 eq {/FDepVector get 0 get} if
dup dup /FontInfo known {
  /FontInfo get dup
  dup /UnderlinePosition known {
    /UnderlinePosition get /vg&uoffset exch def
  }
  {
    pop /vg&uoffset 0 def
  } ifelse
  dup /UnderlineThickness known {
    /UnderlineThickness get /vg&uthick exch def
  }
  {
    pop /vg&uthick 0 def
  } ifelse
}
{
  pop /vg&uoffset 0 def /vg&uthick 0 def
} ifelse
/FontMatrix get
currentfont dup /FontType get 0 eq
{/FontMatrix get matrix concatmatrix}{pop} ifelse
dup 0 vg&uoffset 3 -1 roll transform /vg&uoffset exch def pop
0 vg&uthick 3 -1 roll transform /vg&uthick exch def pop
} def

% Make a frame with the coordinates on the stack.
% <llx> <lly> <urx> <ury> frame --
/frame {4 copy m 3 1 roll exch l 4 -2 roll l l h} def

% Resets the accumulated bounding box to a degenerate box at the
% current point.
% -- resetbbox --
/resetbbox {
  currentpoint 2 copy
  /bbury exch def
  /bburx exch def
  /bblly exch def
  /bbllx exch def
} def

% Update the accumulated bounding box.
% <llx'> <lly'> <urx'> <ury'> updatebbox --
/updatebbox {
  dup bbury gt {/bbury exch def} {pop} ifelse
  dup bburx gt {/bburx exch def} {pop} ifelse
  dup bblly lt {/bblly exch def} {pop} ifelse
  dup bbllx lt {/bbllx exch def} {pop} ifelse
} def

% Set the bounding box to the values on the stack.
% <llx'> <lly'> <urx'> <ury'> updatebbox --
/restorebbox {
  /bbury exch def /bburx exch def /bblly exch def /bbllx exch def
} def

% Push the accumulated bounding box onto the stack.
% -- pushbbox <llx> <lly> <urx> <ury>
/pushbbox {bbllx bblly bburx bbury} def

% Make the relative bounding box relative to the currentpoint.
% <llx'> <lly'> <urx'> <ury'> inflate <llx> <lly> <urx> <ury>
/inflate {
  2 {fontsize 0.2 mul add 4 1 roll} repeat
  2 {fontsize 0.2 mul sub 4 1 roll} repeat
} def

% Make the relative bounding box relative to the currentpoint.
% <llx'> <lly'> <urx'> <ury'> relative <llx> <lly> <urx> <ury>
/relative {
  currentpoint 3 -1 roll add 3 1 roll add exch 4 2 roll
  currentpoint 3 -1 roll add 3 1 roll add exch 4 2 roll
} def

% Returns the size of a string appropriate for recshow.
% <string> stringsize <llx> <lly> <urx> <ury>
/stringsize {
  pushbbox /internalshow load /internalstroke load 7 -1 roll
  q
  nulldevice 0 0 m
  nullinternalshow nullinternalstroke
  resetbbox
  recshow
  /internalstroke exch def /internalshow exch def
  pushbbox 8 -4 roll restorebbox
  Q
} def

% Calculate values for string positioning.
/calcval {4 copy
  3 -1 roll sub /widy exch def sub neg /widx exch def
  pop pop /dy exch def /dx exch def} def

% Utilities to position a string.
% First letter (U=upper, C=center, B=baseline, L=lower)
% Second letter (L=left, C=center, R=right)
/align [
{calcval dx neg widy dy add neg rmoveto} % UL
{calcval dx neg widy 2 div dy add neg rmoveto} % CL
{calcval dx neg 0 rmoveto} % BL
{calcval dx neg dy neg rmoveto} % LL
{calcval widx dx add neg widy dy add neg rmoveto} % UR
{calcval widx dx add neg widy 2 div dy add neg rmoveto} % CR
{calcval widx dx add neg 0 rmoveto} % BR
{calcval widx dx add neg dy neg rmoveto} % LR
{calcval widx 2 div dx add neg widy dy add neg rmoveto} % UC
{calcval widx 2 div dx add neg widy 2 div dy add neg rmoveto} % CC
{calcval widx 2 div dx add neg 0 rmoveto} % BC
{calcval widx 2 div dx add neg dy neg rmoveto} % LC
] def

/vg&str {m q 1 -1 scale dup stringsize 4 copy align 11 -1 roll get exec
         q inflate relative frame exch exec Q recshow Q} def

end /procDict exch def
%%EndProlog

%%BeginSetup
save
procDict begin
printColorMap begin
446 207 setpagesize
0 0 0 0 setmargins
0 0 setorigin
446 207 setsize
naturalsize
portrait
imagescale
cliptobounds
setbasematrix
/Helvetica 10 sf
defaultGraphicsState
%%EndSetup

0.00000 0.00000 0.00000 RG
[ 1.00000 0.00000 0.00000 1.00000 0.00000 0.00000 ] defaultmatrix matrix concatmatrix setmatrix
cliprestore
1.00000 1.00000 1.00000 RG
newpath
0.00000 0.00000 m
446.000 0.00000 l
446.000 207.000 l
0.00000 207.000 l
0.00000 0.00000 l
h
f
0.00000 0.00000 0.00000 RG
0.00000 0.00000 0.00000 RG
[ 1.00000 0.00000 0.00000 1.00000 0.00000 0.00000 ] defaultmatrix matrix concatmatrix setmatrix
cliprestore
1.00000 1.00000 1.00000 RG
newpath
0.00000 0.00000 m
446.000 0.00000 l
446.000 207.000 l
0.00000 207.000 l
0.00000 0.00000 l
h
f
0.00000 0.00000 0.00000 RG
0 0 446 207 rc
q
[ 1.00000 0.00000 0.00000 1.00000 0.00000 0.00000 ] concat
[ 1.00000 0.00000 0.00000 1.00000 -245.000 -174.000 ] concat
1.00000 1.00000 1.00000 RG
newpath
245.000 174.000 m
691.000 174.000 l
691.000 381.000 l
245.000 381.000 l
245.000 174.000 l
h
f
0.00000 0.00000 0.00000 RG
[ 1.00000 0.00000 0.00000 1.00000 -245.000 -174.000 ] defaultmatrix matrix concatmatrix setmatrix
[ 1.00000 0.00000 0.00000 1.00000 -245.000 -174.000 ] defaultmatrix matrix concatmatrix setmatrix
[ 1.00000 0.00000 0.00000 1.00000 0.00000 0.00000 ] defaultmatrix matrix concatmatrix setmatrix
[ 1.00000 0.00000 0.00000 1.00000 -245.000 -174.000 ] defaultmatrix matrix concatmatrix setmatrix
q
newpath
294.561 322.792 m
294.561 322.792 l
294.561 324.408 295.871 325.719 297.487 325.719  c
297.487 325.719 l
299.103 325.719 300.413 324.408 300.413 322.792  c
300.413 322.792 l
300.413 321.176 299.103 319.866 297.487 319.866  c
297.487 319.866 l
295.871 319.866 294.561 321.176 294.561 322.792  c
h
f
0 J
1.45000 M
newpath
294.561 322.792 m
294.561 322.792 l
294.561 324.408 295.871 325.719 297.487 325.719  c
297.487 325.719 l
299.103 325.719 300.413 324.408 300.413 322.792  c
300.413 322.792 l
300.413 321.176 299.103 319.866 297.487 319.866  c
297.487 319.866 l
295.871 319.866 294.561 321.176 294.561 322.792  c
h
S
2 J
10.0000 M
Q
q
0 J
1.45000 M
newpath
277.487 322.792 m
277.487 322.792 l
277.487 333.838 286.442 342.792 297.487 342.792  c
297.487 342.792 l
308.533 342.792 317.487 333.838 317.487 322.792  c
317.487 322.792 l
317.487 311.747 308.533 302.792 297.487 302.792  c
297.487 302.792 l
286.442 302.792 277.487 311.747 277.487 322.792  c
h
S
2 J
10.0000 M
0 J
1.45000 M
newpath
291.070 360.857 m
291.070 352.263 l
294.320 352.263 l
294.883 352.263 295.315 352.289 295.617 352.341  c
296.044 352.414 296.401 352.550 296.687 352.748  c
296.974 352.945 297.203 353.222 297.375 353.576  c
297.547 353.930 297.633 354.320 297.633 354.748  c
297.633 355.477 297.401 356.094 296.937 356.599  c
296.474 357.104 295.633 357.357 294.414 357.357  c
292.211 357.357 l
292.211 360.857 l
291.070 360.857 l
h
292.211 356.357 m
294.430 356.357 l
295.169 356.357 295.693 356.219 296.000 355.943  c
296.307 355.667 296.461 355.279 296.461 354.779  c
296.461 354.425 296.370 354.120 296.187 353.865  c
296.005 353.610 295.768 353.440 295.477 353.357  c
295.279 353.305 294.924 353.279 294.414 353.279  c
292.211 353.279 l
292.211 356.357 l
h
303.012 360.091 m
302.616 360.425 302.238 360.659 301.879 360.794  c
301.519 360.930 301.131 360.998 300.715 360.998  c
300.027 360.998 299.501 360.831 299.137 360.498  c
298.772 360.164 298.590 359.737 298.590 359.216  c
298.590 358.914 298.657 358.636 298.793 358.380  c
298.928 358.125 299.111 357.922 299.340 357.771  c
299.569 357.620 299.824 357.508 300.105 357.435  c
300.303 357.373 300.616 357.315 301.043 357.263  c
301.887 357.169 302.512 357.050 302.918 356.904  c
302.918 356.758 302.918 356.669 302.918 356.638  c
302.918 356.201 302.819 355.893 302.621 355.716  c
302.350 355.487 301.949 355.373 301.418 355.373  c
300.928 355.373 300.564 355.458 300.324 355.630  c
300.085 355.802 299.907 356.107 299.793 356.544  c
298.762 356.404 l
298.855 355.966 299.012 355.612 299.230 355.341  c
299.449 355.070 299.762 354.862 300.168 354.716  c
300.574 354.570 301.043 354.498 301.574 354.498  c
302.105 354.498 302.538 354.560 302.871 354.685  c
303.204 354.810 303.449 354.966 303.605 355.154  c
303.762 355.341 303.871 355.581 303.934 355.873  c
303.965 356.050 303.980 356.373 303.980 356.841  c
303.980 358.248 l
303.980 359.227 304.004 359.847 304.051 360.107  c
304.098 360.367 304.189 360.617 304.324 360.857  c
303.215 360.857 l
303.111 360.638 303.043 360.383 303.012 360.091  c
h
302.918 357.732 m
302.532 357.888 301.960 358.024 301.199 358.138  c
300.762 358.201 300.454 358.271 300.277 358.349  c
300.100 358.427 299.962 358.539 299.863 358.685  c
299.764 358.831 299.715 358.998 299.715 359.185  c
299.715 359.466 299.822 359.701 300.035 359.888  c
300.249 360.076 300.559 360.169 300.965 360.169  c
301.371 360.169 301.733 360.081 302.051 359.904  c
302.368 359.727 302.600 359.482 302.746 359.169  c
302.861 358.930 302.918 358.581 302.918 358.123  c
302.918 357.732 l
h
f
2 J
10.0000 M
Q
q
0 J
1.45000 M
newpath
274.987 264.792 m
319.987 264.792 l
319.987 272.792 l
274.987 272.792 l
h
S
2 J
10.0000 M
0 J
1.45000 M
newpath
267.173 272.741 m
266.777 273.074 266.399 273.308 266.040 273.444  c
265.681 273.579 265.293 273.647 264.876 273.647  c
264.188 273.647 263.662 273.480 263.298 273.147  c
262.933 272.814 262.751 272.387 262.751 271.866  c
262.751 271.564 262.819 271.285 262.954 271.030  c
263.089 270.775 263.272 270.571 263.501 270.420  c
263.730 270.269 263.985 270.157 264.267 270.084  c
264.464 270.022 264.777 269.965 265.204 269.913  c
266.048 269.819 266.673 269.699 267.079 269.553  c
267.079 269.407 267.079 269.319 267.079 269.288  c
267.079 268.850 266.980 268.543 266.782 268.366  c
266.511 268.137 266.110 268.022 265.579 268.022  c
265.089 268.022 264.725 268.108 264.485 268.280  c
264.246 268.452 264.069 268.756 263.954 269.194  c
262.923 269.053 l
263.017 268.616 263.173 268.262 263.392 267.991  c
263.610 267.720 263.923 267.512 264.329 267.366  c
264.735 267.220 265.204 267.147 265.735 267.147  c
266.267 267.147 266.699 267.209 267.032 267.334  c
267.365 267.459 267.610 267.616 267.767 267.803  c
267.923 267.991 268.032 268.230 268.095 268.522  c
268.126 268.699 268.142 269.022 268.142 269.491  c
268.142 270.897 l
268.142 271.876 268.165 272.496 268.212 272.756  c
268.259 273.017 268.350 273.267 268.485 273.506  c
267.376 273.506 l
267.272 273.288 267.204 273.032 267.173 272.741  c
h
267.079 270.381 m
266.694 270.538 266.121 270.673 265.360 270.788  c
264.923 270.850 264.615 270.920 264.438 270.999  c
264.261 271.077 264.123 271.189 264.024 271.334  c
263.925 271.480 263.876 271.647 263.876 271.834  c
263.876 272.116 263.983 272.350 264.196 272.538  c
264.410 272.725 264.720 272.819 265.126 272.819  c
265.532 272.819 265.894 272.730 266.212 272.553  c
266.530 272.376 266.761 272.131 266.907 271.819  c
267.022 271.579 267.079 271.230 267.079 270.772  c
267.079 270.381 l
h
f
2 J
10.0000 M
Q
q
0 J
1.45000 M
newpath
478.581 300.292 m
486.581 300.292 l
486.581 345.292 l
478.581 345.292 l
h
S
2 J
10.0000 M
0 J
1.45000 M
newpath
482.067 359.836 m
481.317 359.836 l
482.484 357.961 483.067 356.080 483.067 354.195  c
483.067 353.466 482.984 352.737 482.817 352.008  c
482.682 351.424 482.495 350.862 482.255 350.320  c
482.099 349.976 481.786 349.393 481.317 348.570  c
482.067 348.570 l
482.797 349.549 483.338 350.534 483.692 351.523  c
483.995 352.377 484.146 353.268 484.146 354.195  c
484.146 355.247 483.942 356.265 483.536 357.250  c
483.130 358.234 482.640 359.096 482.067 359.836  c
h
f
2 J
10.0000 M
Q
q
0 J
1.45000 M
newpath
353.519 300.292 m
361.519 300.292 l
361.519 345.292 l
353.519 345.292 l
h
S
2 J
10.0000 M
0 J
1.45000 M
newpath
358.333 360.373 m
357.750 359.633 357.257 358.771 356.856 357.787  c
356.455 356.802 356.255 355.784 356.255 354.732  c
356.255 353.805 356.401 352.914 356.692 352.060  c
357.047 351.070 357.593 350.086 358.333 349.107  c
359.083 349.107 l
358.614 349.919 358.302 350.498 358.146 350.841  c
357.906 351.383 357.718 351.945 357.583 352.529  c
357.416 353.258 357.333 353.992 357.333 354.732  c
357.333 356.617 357.916 358.498 359.083 360.373  c
358.333 360.373 l
h
f
2 J
10.0000 M
Q
q
0 J
1.45000 M
newpath
397.550 264.792 m
442.550 264.792 l
442.550 272.792 l
397.550 272.792 l
h
S
2 J
10.0000 M
0 J
1.45000 M
newpath
386.642 273.506 m
385.657 273.506 l
385.657 264.913 l
386.720 264.913 l
386.720 267.975 l
387.168 267.423 387.735 267.147 388.423 267.147  c
388.808 267.147 389.170 267.222 389.509 267.374  c
389.847 267.525 390.129 267.741 390.353 268.022  c
390.577 268.303 390.751 268.642 390.876 269.038  c
391.001 269.433 391.064 269.855 391.064 270.303  c
391.064 271.366 390.798 272.189 390.267 272.772  c
389.735 273.355 389.105 273.647 388.376 273.647  c
387.636 273.647 387.058 273.340 386.642 272.725  c
386.642 273.506 l
h
386.626 270.350 m
386.626 271.090 386.730 271.626 386.939 271.959  c
387.272 272.501 387.720 272.772 388.282 272.772  c
388.741 272.772 389.139 272.574 389.478 272.178  c
389.816 271.782 389.985 271.183 389.985 270.381  c
389.985 269.569 389.824 268.970 389.501 268.584  c
389.178 268.199 388.787 268.006 388.329 268.006  c
387.871 268.006 387.472 268.207 387.134 268.608  c
386.795 269.009 386.626 269.590 386.626 270.350  c
h
f
2 J
10.0000 M
Q
q
0 J
1.45000 M
newpath
400.050 322.792 m
400.050 322.792 l
400.050 333.838 409.004 342.792 420.050 342.792  c
420.050 342.792 l
431.096 342.792 440.050 333.838 440.050 322.792  c
440.050 322.792 l
440.050 311.747 431.096 302.792 420.050 302.792  c
420.050 302.792 l
409.004 302.792 400.050 311.747 400.050 322.792  c
h
S
2 J
10.0000 M
0 J
1.45000 M
newpath
413.633 360.857 m
413.633 352.263 l
416.883 352.263 l
417.445 352.263 417.878 352.289 418.180 352.341  c
418.607 352.414 418.964 352.550 419.250 352.748  c
419.536 352.945 419.766 353.222 419.938 353.576  c
420.109 353.930 420.195 354.320 420.195 354.748  c
420.195 355.477 419.964 356.094 419.500 356.599  c
419.036 357.104 418.195 357.357 416.977 357.357  c
414.773 357.357 l
414.773 360.857 l
413.633 360.857 l
h
414.773 356.357 m
416.992 356.357 l
417.732 356.357 418.255 356.219 418.563 355.943  c
418.870 355.667 419.023 355.279 419.023 354.779  c
419.023 354.425 418.932 354.120 418.750 353.865  c
418.568 353.610 418.331 353.440 418.039 353.357  c
417.841 353.305 417.487 353.279 416.977 353.279  c
414.773 353.279 l
414.773 356.357 l
h
422.480 360.857 m
421.496 360.857 l
421.496 352.263 l
422.559 352.263 l
422.559 355.326 l
423.007 354.774 423.574 354.498 424.262 354.498  c
424.647 354.498 425.009 354.573 425.348 354.724  c
425.686 354.875 425.967 355.091 426.191 355.373  c
426.415 355.654 426.590 355.992 426.715 356.388  c
426.840 356.784 426.902 357.206 426.902 357.654  c
426.902 358.716 426.637 359.539 426.105 360.123  c
425.574 360.706 424.944 360.998 424.215 360.998  c
423.475 360.998 422.897 360.690 422.480 360.076  c
422.480 360.857 l
h
422.465 357.701 m
422.465 358.440 422.569 358.977 422.777 359.310  c
423.111 359.852 423.559 360.123 424.121 360.123  c
424.579 360.123 424.978 359.925 425.316 359.529  c
425.655 359.133 425.824 358.534 425.824 357.732  c
425.824 356.919 425.663 356.320 425.340 355.935  c
425.017 355.550 424.626 355.357 424.168 355.357  c
423.710 355.357 423.311 355.557 422.973 355.958  c
422.634 356.360 422.465 356.940 422.465 357.701  c
h
f
2 J
10.0000 M
Q
q
0 J
1.45000 M
newpath
525.112 264.792 m
570.112 264.792 l
570.112 272.792 l
525.112 272.792 l
h
S
2 J
10.0000 M
0 J
1.45000 M
newpath
517.298 271.225 m
518.329 271.366 l
518.215 272.074 517.923 272.631 517.454 273.038  c
516.985 273.444 516.413 273.647 515.735 273.647  c
514.881 273.647 514.196 273.368 513.681 272.811  c
513.165 272.254 512.907 271.454 512.907 270.413  c
512.907 269.746 513.019 269.160 513.243 268.655  c
513.467 268.150 513.806 267.772 514.259 267.522  c
514.712 267.272 515.209 267.147 515.751 267.147  c
516.418 267.147 516.967 267.316 517.400 267.655  c
517.832 267.993 518.110 268.480 518.235 269.116  c
517.204 269.272 l
517.110 268.855 516.939 268.540 516.689 268.327  c
516.439 268.113 516.137 268.006 515.782 268.006  c
515.251 268.006 514.819 268.196 514.485 268.577  c
514.152 268.957 513.985 269.558 513.985 270.381  c
513.985 271.225 514.147 271.834 514.470 272.209  c
514.793 272.584 515.209 272.772 515.720 272.772  c
516.137 272.772 516.483 272.647 516.759 272.397  c
517.035 272.147 517.215 271.756 517.298 271.225  c
h
f
2 J
10.0000 M
Q
q
0 J
1.45000 M
newpath
527.612 322.792 m
527.612 322.792 l
527.612 333.838 536.567 342.792 547.612 342.792  c
547.612 342.792 l
558.658 342.792 567.612 333.838 567.612 322.792  c
567.612 322.792 l
567.612 311.747 558.658 302.792 547.612 302.792  c
547.612 302.792 l
536.567 302.792 527.612 311.747 527.612 322.792  c
h
S
2 J
10.0000 M
0 J
1.45000 M
newpath
541.532 360.857 m
541.532 352.263 l
544.782 352.263 l
545.345 352.263 545.777 352.289 546.079 352.341  c
546.506 352.414 546.863 352.550 547.150 352.748  c
547.436 352.945 547.665 353.222 547.837 353.576  c
548.009 353.930 548.095 354.320 548.095 354.748  c
548.095 355.477 547.863 356.094 547.400 356.599  c
546.936 357.104 546.095 357.357 544.876 357.357  c
542.673 357.357 l
542.673 360.857 l
541.532 360.857 l
h
542.673 356.357 m
544.892 356.357 l
545.631 356.357 546.155 356.219 546.462 355.943  c
546.769 355.667 546.923 355.279 546.923 354.779  c
546.923 354.425 546.832 354.120 546.650 353.865  c
546.467 353.610 546.230 353.440 545.939 353.357  c
545.741 353.305 545.387 353.279 544.876 353.279  c
542.673 353.279 l
542.673 356.357 l
h
553.474 358.576 m
554.505 358.716 l
554.390 359.425 554.099 359.982 553.630 360.388  c
553.161 360.794 552.588 360.998 551.911 360.998  c
551.057 360.998 550.372 360.719 549.857 360.162  c
549.341 359.604 549.083 358.805 549.083 357.763  c
549.083 357.097 549.195 356.511 549.419 356.005  c
549.643 355.500 549.982 355.123 550.435 354.873  c
550.888 354.623 551.385 354.498 551.927 354.498  c
552.594 354.498 553.143 354.667 553.575 355.005  c
554.008 355.344 554.286 355.831 554.411 356.466  c
553.380 356.623 l
553.286 356.206 553.114 355.891 552.864 355.677  c
552.614 355.464 552.312 355.357 551.958 355.357  c
551.427 355.357 550.995 355.547 550.661 355.927  c
550.328 356.307 550.161 356.909 550.161 357.732  c
550.161 358.576 550.323 359.185 550.646 359.560  c
550.969 359.935 551.385 360.123 551.896 360.123  c
552.312 360.123 552.659 359.998 552.935 359.748  c
553.211 359.498 553.390 359.107 553.474 358.576  c
h
f
2 J
10.0000 M
Q
q
0 J
1.45000 M
newpath
337.519 232.055 m
337.519 232.055 l
337.519 243.101 346.473 252.055 357.519 252.055  c
357.519 252.055 l
368.564 252.055 377.519 243.101 377.519 232.055  c
377.519 232.055 l
377.519 221.010 368.564 212.055 357.519 212.055  c
357.519 212.055 l
346.473 212.055 337.519 221.010 337.519 232.055  c
h
S
2 J
10.0000 M
0 J
1.45000 M
newpath
353.105 203.419 m
353.105 194.825 l
356.355 194.825 l
356.918 194.825 357.350 194.851 357.652 194.903  c
358.079 194.976 358.436 195.111 358.723 195.309  c
359.009 195.507 359.238 195.783 359.410 196.137  c
359.582 196.492 359.668 196.882 359.668 197.309  c
359.668 198.038 359.436 198.656 358.973 199.161  c
358.509 199.666 357.668 199.919 356.449 199.919  c
354.246 199.919 l
354.246 203.419 l
353.105 203.419 l
h
354.246 198.919 m
356.465 198.919 l
357.204 198.919 357.728 198.781 358.035 198.505  c
358.342 198.229 358.496 197.841 358.496 197.341  c
358.496 196.986 358.405 196.682 358.223 196.426  c
358.040 196.171 357.803 196.002 357.512 195.919  c
357.314 195.867 356.960 195.841 356.449 195.841  c
354.246 195.841 l
354.246 198.919 l
h
360.984 196.044 m
360.984 194.825 l
362.047 194.825 l
362.047 196.044 l
360.984 196.044 l
h
360.984 203.419 m
360.984 197.200 l
362.047 197.200 l
362.047 203.419 l
360.984 203.419 l
h
f
2 J
10.0000 M
Q
q
0 J
1.45000 M
newpath
462.581 232.055 m
462.581 232.055 l
462.581 243.101 471.535 252.055 482.581 252.055  c
482.581 252.055 l
493.627 252.055 502.581 243.101 502.581 232.055  c
502.581 232.055 l
502.581 221.010 493.627 212.055 482.581 212.055  c
482.581 212.055 l
471.535 212.055 462.581 221.010 462.581 232.055  c
h
S
2 J
10.0000 M
0 J
1.45000 M
newpath
478.168 203.419 m
478.168 194.825 l
481.418 194.825 l
481.981 194.825 482.413 194.851 482.715 194.903  c
483.142 194.976 483.499 195.111 483.785 195.309  c
484.072 195.507 484.301 195.783 484.473 196.137  c
484.645 196.492 484.731 196.882 484.731 197.309  c
484.731 198.038 484.499 198.656 484.035 199.161  c
483.572 199.666 482.731 199.919 481.512 199.919  c
479.309 199.919 l
479.309 203.419 l
478.168 203.419 l
h
479.309 198.919 m
481.527 198.919 l
482.267 198.919 482.790 198.781 483.098 198.505  c
483.405 198.229 483.559 197.841 483.559 197.341  c
483.559 196.986 483.468 196.682 483.285 196.426  c
483.103 196.171 482.866 196.002 482.574 195.919  c
482.376 195.867 482.022 195.841 481.512 195.841  c
479.309 195.841 l
479.309 198.919 l
h
486.031 196.059 m
486.031 194.825 l
487.094 194.825 l
487.094 196.059 l
486.031 196.059 l
h
484.703 205.841 m
484.891 204.934 l
485.109 204.986 485.276 205.012 485.391 205.012  c
485.609 205.012 485.771 204.942 485.875 204.801  c
485.979 204.661 486.031 204.304 486.031 203.731  c
486.031 197.200 l
487.094 197.200 l
487.094 203.762 l
487.094 204.523 486.995 205.054 486.797 205.356  c
486.537 205.752 486.115 205.950 485.531 205.950  c
485.240 205.950 484.964 205.913 484.703 205.841  c
h
f
2 J
10.0000 M
Q
q
0 J
1.45000 M
newpath
597.612 300.292 m
605.612 300.292 l
605.612 345.292 l
597.612 345.292 l
h
S
2 J
10.0000 M
0 J
1.45000 M
newpath
603.797 351.789 m
603.047 352.398 l
602.557 352.034 602.104 351.851 601.688 351.851  c
601.344 351.851 601.094 351.942 600.938 352.125  c
600.781 352.307 600.703 352.502 600.703 352.711  c
600.703 352.992 600.820 353.221 601.055 353.398  c
601.289 353.575 601.630 353.664 602.078 353.664  c
602.141 353.664 602.240 353.664 602.375 353.664  c
602.375 354.554 l
602.250 354.544 602.156 354.539 602.094 354.539  c
601.542 354.539 601.156 354.648 600.938 354.867  c
600.719 355.086 600.609 355.325 600.609 355.586  c
600.609 355.867 600.719 356.101 600.938 356.289  c
601.156 356.476 601.417 356.570 601.719 356.570  c
602.271 356.570 602.787 356.315 603.266 355.804  c
604.016 356.445 l
603.391 357.112 602.615 357.445 601.688 357.445  c
600.958 357.445 600.414 357.260 600.055 356.890  c
599.695 356.521 599.516 356.086 599.516 355.586  c
599.516 354.888 599.859 354.388 600.547 354.086  c
599.974 353.763 599.688 353.315 599.688 352.742  c
599.688 352.284 599.857 351.870 600.195 351.500  c
600.534 351.130 601.052 350.945 601.750 350.945  c
602.563 350.945 603.245 351.226 603.797 351.789  c
h
f
2 J
10.0000 M
Q
q
0 J
1.45000 M
newpath
635.612 322.792 m
635.612 322.792 l
635.612 333.838 644.567 342.792 655.612 342.792  c
655.612 342.792 l
666.658 342.792 675.612 333.838 675.612 322.792  c
675.612 322.792 l
675.612 311.747 666.658 302.792 655.612 302.792  c
655.612 302.792 l
644.567 302.792 635.612 311.747 635.612 322.792  c
h
S
2 J
10.0000 M
0 J
1.45000 M
newpath
642.522 360.857 m
642.522 352.263 l
645.772 352.263 l
646.334 352.263 646.766 352.289 647.068 352.341  c
647.496 352.414 647.852 352.550 648.139 352.748  c
648.425 352.945 648.654 353.222 648.826 353.576  c
648.998 353.930 649.084 354.320 649.084 354.748  c
649.084 355.477 648.852 356.094 648.389 356.599  c
647.925 357.104 647.084 357.357 645.865 357.357  c
643.662 357.357 l
643.662 360.857 l
642.522 360.857 l
h
643.662 356.357 m
645.881 356.357 l
646.621 356.357 647.144 356.219 647.451 355.943  c
647.759 355.667 647.912 355.279 647.912 354.779  c
647.912 354.425 647.821 354.120 647.639 353.865  c
647.457 353.610 647.220 353.440 646.928 353.357  c
646.730 353.305 646.376 353.279 645.865 353.279  c
643.662 353.279 l
643.662 356.357 l
h
654.651 358.857 m
655.744 358.982 l
655.578 359.617 655.260 360.112 654.791 360.466  c
654.322 360.820 653.729 360.998 653.010 360.998  c
652.104 360.998 651.382 360.716 650.846 360.154  c
650.309 359.591 650.041 358.805 650.041 357.794  c
650.041 356.753 650.312 355.943 650.854 355.365  c
651.395 354.787 652.093 354.498 652.947 354.498  c
653.781 354.498 654.460 354.779 654.986 355.341  c
655.512 355.904 655.776 356.701 655.776 357.732  c
655.776 357.794 655.776 357.888 655.776 358.013  c
651.135 358.013 l
651.177 358.701 651.369 359.224 651.713 359.583  c
652.057 359.943 652.489 360.123 653.010 360.123  c
653.395 360.123 653.726 360.021 654.002 359.818  c
654.278 359.615 654.494 359.294 654.651 358.857  c
h
651.197 357.154 m
654.666 357.154 l
654.624 356.623 654.494 356.227 654.276 355.966  c
653.932 355.560 653.494 355.357 652.963 355.357  c
652.473 355.357 652.065 355.518 651.736 355.841  c
651.408 356.164 651.229 356.602 651.197 357.154  c
h
657.074 360.857 m
657.074 354.638 l
658.012 354.638 l
658.012 355.513 l
658.470 354.836 659.132 354.498 659.996 354.498  c
660.371 354.498 660.718 354.565 661.035 354.701  c
661.353 354.836 661.590 355.013 661.746 355.232  c
661.902 355.451 662.012 355.706 662.074 355.998  c
662.106 356.195 662.121 356.539 662.121 357.029  c
662.121 360.857 l
661.074 360.857 l
661.074 357.076 l
661.074 356.638 661.033 356.315 660.949 356.107  c
660.866 355.899 660.720 355.729 660.512 355.599  c
660.304 355.469 660.059 355.404 659.777 355.404  c
659.330 355.404 658.942 355.547 658.613 355.833  c
658.285 356.120 658.121 356.659 658.121 357.451  c
658.121 360.857 l
657.074 360.857 l
h
667.779 360.857 m
667.779 360.076 l
667.384 360.690 666.805 360.998 666.045 360.998  c
665.545 360.998 665.087 360.860 664.670 360.583  c
664.253 360.307 663.930 359.925 663.701 359.435  c
663.472 358.945 663.358 358.383 663.358 357.748  c
663.358 357.133 663.462 356.570 663.670 356.060  c
663.878 355.550 664.191 355.162 664.608 354.896  c
665.024 354.630 665.488 354.498 665.998 354.498  c
666.373 354.498 666.707 354.576 666.998 354.732  c
667.290 354.888 667.529 355.091 667.717 355.341  c
667.717 352.263 l
668.764 352.263 l
668.764 360.857 l
667.779 360.857 l
h
664.451 357.748 m
664.451 358.550 664.618 359.146 664.951 359.537  c
665.285 359.927 665.680 360.123 666.139 360.123  c
666.597 360.123 666.988 359.935 667.311 359.560  c
667.634 359.185 667.795 358.612 667.795 357.841  c
667.795 356.987 667.631 356.362 667.303 355.966  c
666.975 355.570 666.571 355.373 666.092 355.373  c
665.623 355.373 665.233 355.563 664.920 355.943  c
664.608 356.323 664.451 356.925 664.451 357.748  c
h
f
2 J
10.0000 M
Q
0 J
1.45000 M
newpath
289.150 304.624 m
289.150 280.795 l
S
newpath
289.150 272.795 m
284.150 284.795 l
289.150 281.795 l
294.150 284.795 l
h
f
2 J
10.0000 M
0 J
1.45000 M
newpath
306.019 272.783 m
306.019 296.722 l
S
newpath
306.019 304.722 m
311.019 292.722 l
306.019 295.722 l
301.019 292.722 l
h
f
2 J
10.0000 M
0 J
1.45000 M
newpath
317.507 322.792 m
345.494 322.792 l
S
newpath
353.494 322.792 m
341.494 317.792 l
344.494 322.792 l
341.494 327.792 l
h
f
2 J
10.0000 M
0 J
1.45000 M
newpath
428.581 272.783 m
428.581 296.722 l
S
newpath
428.581 304.722 m
433.581 292.722 l
428.581 295.722 l
423.581 292.722 l
h
f
2 J
10.0000 M
0 J
1.45000 M
newpath
361.518 322.792 m
392.073 322.792 l
S
newpath
400.073 322.792 m
388.073 317.792 l
391.073 322.792 l
388.073 327.792 l
h
f
2 J
10.0000 M
0 J
1.45000 M
newpath
411.713 304.624 m
411.713 280.795 l
S
newpath
411.713 272.795 m
406.713 284.795 l
411.713 281.795 l
416.713 284.795 l
h
f
2 J
10.0000 M
0 J
1.45000 M
newpath
440.049 322.792 m
470.552 322.792 l
S
newpath
478.552 322.792 m
466.552 317.792 l
469.552 322.792 l
466.552 327.792 l
h
f
2 J
10.0000 M
0 J
1.45000 M
newpath
556.144 272.783 m
556.144 296.722 l
S
newpath
556.144 304.722 m
561.144 292.722 l
556.144 295.722 l
551.144 292.722 l
h
f
2 J
10.0000 M
0 J
1.45000 M
newpath
486.550 322.792 m
519.606 322.792 l
S
newpath
527.606 322.792 m
515.606 317.792 l
518.606 322.792 l
515.606 327.792 l
h
f
2 J
10.0000 M
0 J
1.45000 M
newpath
539.275 304.624 m
539.275 280.795 l
S
newpath
539.275 272.795 m
534.275 284.795 l
539.275 281.795 l
544.275 284.795 l
h
f
2 J
10.0000 M
0 J
1.45000 M
newpath
297.487 264.810 m
297.487 232.055 l
329.498 232.055 l
S
newpath
337.498 232.055 m
325.498 227.055 l
328.498 232.055 l
325.498 237.055 l
h
f
2 J
10.0000 M
0 J
1.45000 M
newpath
377.513 232.055 m
412.189 232.055 l
412.189 256.781 l
S
newpath
412.189 264.781 m
417.189 252.781 l
412.189 255.781 l
407.189 252.781 l
h
f
2 J
10.0000 M
0 J
1.45000 M
newpath
428.337 264.822 m
428.337 232.055 l
454.584 232.055 l
S
newpath
462.584 232.055 m
450.584 227.055 l
453.584 232.055 l
450.584 237.055 l
h
f
2 J
10.0000 M
0 J
1.45000 M
newpath
502.554 232.055 m
547.612 232.055 l
547.612 256.810 l
S
newpath
547.612 264.810 m
552.612 252.810 l
547.612 255.810 l
542.612 252.810 l
h
f
2 J
10.0000 M
0 J
1.45000 M
newpath
567.625 322.792 m
589.596 322.792 l
S
newpath
597.596 322.792 m
585.596 317.792 l
588.596 322.792 l
585.596 327.792 l
h
f
2 J
10.0000 M
0 J
1.45000 M
newpath
605.594 322.792 m
627.634 322.792 l
S
newpath
635.634 322.792 m
623.634 317.792 l
626.634 322.792 l
623.634 327.792 l
h
f
2 J
10.0000 M
Q
[ 1.00000 0.00000 0.00000 1.00000 0.00000 0.00000 ] defaultmatrix matrix concatmatrix setmatrix
cliprestore

%%Trailer
%%EOF
